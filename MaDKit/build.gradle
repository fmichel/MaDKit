plugins {
	id 'buildlogic.madkit-common-conventions'
	id 'maven-publish'
   	id 'signing'
   	id 'jacoco'
   	id "org.sonarqube" version "6.0.1.5171"
   	id 'org.gradlex.java-module-testing'
}

group = 'io.github.fmichel'

application {
    mainClass = 'madkit.kernel.Madkit'
    mainModule = 'madkit.base'
}

tasks.withType(JavaExec) {
    jvmArgs '--add-modules', 'ALL-MODULE-PATH'
}

javaModuleTesting.whitebox(testing.suites.getByName("test")){
	requires.add("org.testng")
	opensTo.add("org.testng")
	requires.add("org.assertj.core")
}
dependencies {
    api libs.controlsfx
    api libs.commonsConfiguration2
    api libs.commonsBeanutils
    
    implementation libs.picocli
    implementation libs.fastutil
    implementation libs.typetools
    
    testImplementation libs.testng
    testImplementation libs.concurrentunit
    testImplementation libs.slf4j
    testImplementation libs.assertJ
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

publishing {
    repositories {
        maven {
            def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            
            name = "OSSRH"
            url = isReleaseVersion ? releaseRepo : snapshotRepo
            credentials {
                username = findProperty("ORG_GRADLE_PROJECT_sonatypeUsername") ?: System.getenv("ORG_GRADLE_PROJECT_sonatypeUsername")
                password = findProperty("ORG_GRADLE_PROJECT_sonatypePassword") ?: System.getenv("ORG_GRADLE_PROJECT_sonatypePassword")
			}
		}
	}
    publications {
        mavenJava(MavenPublication) {
                 artifactId = 'madkit'
               from(components.java)
            pom {
                name = 'MaDKit'
                description = 'Java library for designing and simulating Multi-Agent Systems'
                url = 'http://www.madkit.net'
                licenses {
                    license {
                        name = 'CeCILL-C'
                        url = 'https://cecill.info/licences/Licence_CeCILL-C_V1-en.html'
                    }
                }
                developers {
                    developer {
                        id = 'fmichel'
                        name = 'Fabien Michel'
                        email = 'fmichel@lirmm.fr'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/fmichel/MaDKit.git'
                    developerConnection = 'scm:git:ssh://github.com:fmichel/MaDKit.git'
                    url = 'https://www.madkit.net/madkit/'
                }
                
            }
        }
    }
}

signing {
  useGpgCmd()
  sign publishing.publications
}

tasks.named('test') {
    useTestNG()
    maxParallelForks = "9"
    minHeapSize = "2048m"
    maxHeapSize = "4096m"

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = true
    }
}

jar {
    manifest {
    	attributes("Main-Class": "madkit.kernel.Madkit")
	}
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}
test.finalizedBy jacocoTestReport

sonar {
  properties {
    property "sonar.projectKey", "michel_madkit-6_AZN4XF4qdA3gHXvO4xzd"
    property "sonar.projectName", "MaDKit-6"
    property "sonar.qualitygate.wait", true 
  }
}

