# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Gradle.gitlab-ci.yml

# This is the Gradle build system for JVM applications
# https://gradle.org/
# https://github.com/gradle/gradle

image: gradle:8.2.1-jdk17-focal

variables:
  GIT_DEPTH: "1"  # Tells git to fetch all the branches of the project, required by the analysis task
  SECURE_FILES_DOWNLOAD_PATH: "."

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches
    - cache/caches/
    - cache/notifications/
    - cache/wrapper/
    - madkit/build
    - .gradle
cache:
  key: "${CI_JOB_NAME}"
  paths:
    - .sonar/cache

build:
  stage: build
  script: ./gradlew --build-cache --gradle-user-home cache/ assemble
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - cache/caches/
      - cache/notifications/
      - cache/wrapper/
      - build
      - .gradle

test:
  stage: test
  script: ./gradlew --build-cache --gradle-user-home cache/ check
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build
      - .gradle

deploy:
  stage: deploy
  script: 
    - GRADLE_USER_HOME="$(pwd)/.gradle"
    - export GRADLE_USER_HOME
    -  apt-get update && apt-get install -y gnupg2 curl
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
    - gpg --pinentry-mode loopback --passphrase $ORG_GRADLE_PROJECT_signingPassword --import $GPG_USER_KEY
    - mkdir -p $GRADLE_USER_HOME
    - cat "$GRADLE_PROPERTIES" > $GRADLE_USER_HOME/gradle.properties
    - echo "Preparing for publish"
    - ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository
  environment: production
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'
  
sonarqube-check:
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - echo "GRADLE SONAR"
    - ./gradlew sonar
    
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'
